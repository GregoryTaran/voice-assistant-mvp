let mediaRecorder = null;
let currentStream = null;
let audioChunks = [];
let isRecording = false;

// –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
let allowAutoResume = false;

// –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
async function startRecording() {
  if (isRecording) return;
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    currentStream = stream;
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];
    isRecording = true;
    allowAutoResume = true; // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É

    setMicUI(true);

    mediaRecorder.ondataavailable = (e) => {
      if (e.data && e.data.size > 0) audioChunks.push(e.data);
    };

    mediaRecorder.onstop = async () => {
      isRecording = false;

      // –≥–∞—Å–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
      try {
        if (currentStream) {
          currentStream.getTracks().forEach(t => t.stop());
          currentStream = null;
        } else if (mediaRecorder && mediaRecorder.stream) {
          mediaRecorder.stream.getTracks().forEach(t => t.stop());
        }
      } catch {}

      // –µ—Å–ª–∏ –º—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏—Å—å –∏–∑-–∑–∞ —Å–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
      if (document.hidden) {
        setMicUI(false);
        return;
      }

      // –æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (!audioChunks.length) { setMicUI(false); return; }
      const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
      audioChunks = [];
      const audioBase64 = await blobToBase64(audioBlob);

      const res = await fetch("/.netlify/functions/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          audio: audioBase64,
          history: clipConvoForSend?.() || [],
          shouldGreet: (window.convo?.length || 0) === 0
        })
      });
      const data = await res.json();
      addToHistory?.(data.query || "(–≥–æ–ª–æ—Å)", data.text);
      setMicUI(false);
      const s2 = document.getElementById("status"); if (s2) s2.innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ";
    };

    mediaRecorder.start(); // –∑–∞–ø–∏—Å—å –∏–¥—ë—Ç, –ø–æ–∫–∞ —Å–∞–º–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–º
  } catch (e) {
    console.error(e);
    isRecording = false;
    setMicUI(false);
    const s = document.getElementById("status"); if (s) s.innerText = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É";
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
function stopRecording(reasonText) {
  if (mediaRecorder && isRecording && mediaRecorder.state === "recording") {
    mediaRecorder.stop();
    const s = document.getElementById("status");
    if (s && reasonText) s.innerText = reasonText;
  }
}

// –ê–≤—Ç–æ-—Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
document.addEventListener("visibilitychange", async () => {
  if (document.hidden) {
    // –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –≤—Å–µ–≥–¥–∞ –≤—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
    stopRecording("‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞");
  } else {
    // –≤–∫–ª–∞–¥–∫–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω –∞–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç
    if (allowAutoResume && !isRecording) {
      const s = document.getElementById("status"); if (s) s.innerText = "üé§ –í–æ–∑–æ–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å‚Ä¶";
      await startRecording();
    }
  }
});

// –ù–∞ —É—Ö–æ–¥/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî —Å—Ç–æ–ø
window.addEventListener("pagehide", () => {
  stopRecording("‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞");
});

// –ö–Ω–æ–ø–∫–∞ ‚Äî —è–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
function toggleRecording() {
  const micBtn = document.getElementById("micBtn");
  const state = micBtn?.dataset.state;
  if (state === "recording") {
    stopRecording("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å‚Ä¶");
  } else {
    startRecording();
  }
}

/* –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ UI/—É—Ç–∏–ª–∏—Ç—ã ‚Äî –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å —É —Ç–µ–±—è */
function setMicUI(active) {
  const status = document.getElementById("status");
  const micBtn = document.getElementById("micBtn");
  const sendBtn = document.getElementById("sendBtn");
  const input = document.getElementById("textInput");
  if (active) {
    status && (status.innerText = "üé§ –ó–∞–ø–∏—Å—å –∏–¥—ë—Ç‚Ä¶ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞");
    if (micBtn) { micBtn.textContent = "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"; micBtn.dataset.state = "recording"; }
    if (sendBtn) sendBtn.disabled = true;
    if (input) input.disabled = true;
  } else {
    status && (status.innerText = "–ì–æ—Ç–æ–≤–æ");
    if (micBtn) { micBtn.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å"; micBtn.dataset.state = "idle"; }
    if (sendBtn) sendBtn.disabled = false;
    if (input) input.disabled = false;
  }
}

function blobToBase64(blob) {
  return new Promise((resolve, reject) => {
    const r = new FileReader();
    r.onloadend = () => resolve(r.result.split(",")[1]);
    r.onerror = reject;
    r.readAsDataURL(blob);
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.toggleRecording = toggleRecording;
