let mediaRecorder = null;
let audioChunks = [];
let currentStream = null;
const MAX_TURNS = 10; // —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä "–≤–æ–ø—Ä–æ—Å‚Äì–æ—Ç–≤–µ—Ç" –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º GPT
let convo = JSON.parse(sessionStorage.getItem("clarity_history") || "[]");

// ===== UI & –∏—Å—Ç–æ—Ä–∏—è =====
function saveHistory() {
  sessionStorage.setItem("clarity_history", JSON.stringify(convo.slice(-MAX_TURNS * 2)));
}

function addToHistory(query, answer) {
  const history = document.getElementById("history");
  const div = document.createElement("div");
  div.className = "item";
  div.innerHTML = `
    <div class="q">üßë‚Äçüí¨ ${query || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"} </div>
    <div class="a">ü§ñ ${answer || "‚Äî"}</div>
  `;
  history.prepend(div);

  if (query) convo.push({ role: "user", content: query });
  if (answer) convo.push({ role: "assistant", content: answer });
  convo = convo.slice(-MAX_TURNS * 2);
  saveHistory();
}

window.addEventListener("DOMContentLoaded", () => {
  for (let i = Math.max(0, convo.length - MAX_TURNS * 2); i < convo.length; i += 2) {
    const q = convo[i]?.content || "";
    const a = convo[i + 1]?.content || "";
    if (q || a) {
      const history = document.getElementById("history");
      const div = document.createElement("div");
      div.className = "item";
      div.innerHTML = `
        <div class="q">üßë‚Äçüí¨ ${q || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"} </div>
        <div class="a">ü§ñ ${a || "‚Äî"}</div>
      `;
      history.prepend(div);
    }
  }
});

function clipConvoForSend() {
  const maxChars = 6000;
  let acc = [];
  let total = 0;
  for (let i = convo.length - 1; i >= 0; i--) {
    const s = (convo[i].content || "").slice(0, 1000);
    if (total + s.length > maxChars) break;
    acc.unshift({ role: convo[i].role, content: s });
    total += s.length;
  }
  return acc;
}

function setRecordingUI(on) {
  const status = document.getElementById("status");
  const micBtn = document.getElementById("micBtn");
  const sendBtn = document.getElementById("sendBtn");
  const input = document.getElementById("textInput");
  if (on) {
    status.innerText = "üé§ –°–ª—É—à–∞—é‚Ä¶ (5 —Å–µ–∫)";
    micBtn.disabled = true;
    sendBtn.disabled = true;
    input.disabled = true;
  } else {
    status.innerText = "–ì–æ—Ç–æ–≤–æ";
    micBtn.disabled = false;
    sendBtn.disabled = false;
    input.disabled = false;
  }
}

// ===== –ú–∏–∫—Ä–æ—Ñ–æ–Ω: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ =====
function stopAllAudio(reasonText) {
  try {
    if (mediaRecorder) {
      if (mediaRecorder.state === "recording") {
        mediaRecorder.stop();
      }
    }
  } catch (e) {
    console.warn("mediaRecorder stop err:", e);
  }

  try {
    if (currentStream) {
      currentStream.getTracks().forEach(t => t.stop());
      currentStream = null;
    } else if (mediaRecorder && mediaRecorder.stream) {
      // fallback: —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –µ—Å—Ç—å mediaRecorder.stream
      mediaRecorder.stream.getTracks().forEach(t => t.stop());
    }
  } catch (e) {
    console.warn("stream stop err:", e);
  }

  mediaRecorder = null;
  audioChunks = [];

  const status = document.getElementById("status");
  if (status && reasonText) {
    status.innerText = reasonText;
  }

  // –≤–µ—Ä–Ω—É—Ç—å UI –≤ –Ω–æ—Ä–º—É
  setRecordingUI(false);
}

// –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏/—Ñ–æ–∫—É—Å–∞/—É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
document.addEventListener("visibilitychange", () => {
  if (document.hidden) {
    stopAllAudio("‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞");
  }
});
window.addEventListener("blur", () => {
  stopAllAudio("‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –æ–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å");
});
window.addEventListener("pagehide", () => {
  stopAllAudio("‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞");
});

// ===== –ó–∞–ø–∏—Å—å =====
async function startRecording() {
  try {
    setRecordingUI(true);
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    currentStream = stream;
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];

    mediaRecorder.ondataavailable = (e) => {
      if (e.data && e.data.size > 0) audioChunks.push(e.data);
    };

    mediaRecorder.onstop = async () => {
      // –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (!audioChunks.length) {
        setRecordingUI(false);
        return;
      }

      const status = document.getElementById("status");
      if (status) status.innerText = "‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –∏ –¥—É–º–∞—é‚Ä¶";

      const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
      // –æ—á–∏—Å—Ç–∏–º –∑–∞—Ä–∞–Ω–µ–µ
      stopAllAudio();

      const audioBase64 = await blobToBase64(audioBlob);

      const res = await fetch("/.netlify/functions/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          audio: audioBase64,
          history: clipConvoForSend(),
          shouldGreet: convo.length === 0 // –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏
        })
      });

      const data = await res.json();
      addToHistory(data.query || "(–≥–æ–ª–æ—Å)", data.text);
      const s2 = document.getElementById("status");
      if (s2) s2.innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ";
      setRecordingUI(false);
    };

    mediaRecorder.start();

    // –∞–≤—Ç–æ—Å—Ç–æ–ø —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (mediaRecorder && mediaRecorder.state === "recording") {
        mediaRecorder.stop();
      }
    }, 5000);
  } catch (err) {
    console.error(err);
    stopAllAudio("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
  }
}

function blobToBase64(blob) {
  return new Promise((resolve, reject) => {
    const r = new FileReader();
    r.onloadend = () => resolve(r.result.split(",")[1]);
    r.onerror = reject;
    r.readAsDataURL(blob);
  });
}

// ===== –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ =====
async function sendText() {
  const input = document.getElementById("textInput");
  const text = input.value.trim();
  if (!text) return;

  document.getElementById("status").innerText = "‚è≥ –î—É–º–∞—é‚Ä¶";
  const res = await fetch("/.netlify/functions/ask", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      text,
      history: clipConvoForSend(),
      shouldGreet: convo.length === 0
    })
  });

  const data = await res.json();
  addToHistory(text, data.text);
  document.getElementById("status").innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ";
  input.value = "";
}

function handleKey(e) {
  if (e.key === "Enter") sendText();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
window.startRecording = startRecording;
window.sendText = sendText;
window.handleKey = handleKey;
