let mediaRecorder, audioChunks = [];

// üß† –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ (—É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
const MAX_TURNS = 10; // —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä "–≤–æ–ø—Ä–æ—Å‚Äì–æ—Ç–≤–µ—Ç" –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å GPT
let convo = JSON.parse(sessionStorage.getItem("clarity_history") || "[]");

function saveHistory() {
  sessionStorage.setItem("clarity_history", JSON.stringify(convo.slice(-MAX_TURNS * 2)));
}

// üß© –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω –∏ –≤ –ø–∞–º—è—Ç—å
function addToHistory(query, answer) {
  const history = document.getElementById("history");
  const div = document.createElement("div");
  div.className = "item";
  div.innerHTML = `
    <div class="q">üßë‚Äçüí¨ ${query || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"}</div>
    <div class="a">ü§ñ ${answer || "‚Äî"}</div>
  `;
  history.prepend(div);

  if (query) convo.push({ role: "user", content: query });
  if (answer) convo.push({ role: "assistant", content: answer });
  convo = convo.slice(-MAX_TURNS * 2);
  saveHistory();
}

// üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("DOMContentLoaded", () => {
  for (let i = Math.max(0, convo.length - MAX_TURNS * 2); i < convo.length; i += 2) {
    const q = convo[i]?.content || "";
    const a = convo[i + 1]?.content || "";
    if (q || a) addToHistory(q, a);
  }
});

// üßÆ –£—Ä–µ–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–ø–æ –¥–ª–∏–Ω–µ)
function clipConvoForSend() {
  const maxChars = 6000;
  let acc = [];
  let total = 0;
  for (let i = convo.length - 1; i >= 0; i--) {
    const s = (convo[i].content || "").slice(0, 1000);
    if (total + s.length > maxChars) break;
    acc.unshift({ role: convo[i].role, content: s });
    total += s.length;
  }
  return acc;
}

// üé§ –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function startRecording() {
  const status = document.getElementById("status");
  status.innerText = "üé§ –°–ª—É—à–∞—é‚Ä¶ (5 —Å–µ–∫)";
  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
  mediaRecorder = new MediaRecorder(stream);
  audioChunks = [];

  mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
  mediaRecorder.onstop = async () => {
    status.innerText = "‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –∏ –¥—É–º–∞—é‚Ä¶";
    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
    const audioBase64 = await blobToBase64(audioBlob);

    const res = await fetch('/.netlify/functions/ask', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        audio: audioBase64,
        history: clipConvoForSend()
      })
    });

    const data = await res.json();
    addToHistory(data.query || "(–≥–æ–ª–æ—Å)", data.text);
    status.innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ";
  };

  mediaRecorder.start();
  setTimeout(() => {
    if (mediaRecorder.state === "recording") mediaRecorder.stop();
  }, 5000);
}

// ‚ö° –ü–æ–º–æ—â–Ω–∏–∫: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Blob ‚Üí base64
function blobToBase64(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result.split(',')[1]);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}

// ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
async function sendText() {
  const input = document.getElementById("textInput");
  const text = input.value.trim();
  if (!text) return;

  document.getElementById("status").innerText = "‚è≥ –î—É–º–∞—é‚Ä¶";
  const res = await fetch('/.netlify/functions/ask', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      text,
      history: clipConvoForSend()
    })
  });

  const data = await res.json();
  addToHistory(text, data.text);
  document.getElementById("status").innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ";
  input.value = "";
}

// ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
function handleKey(e) {
  if (e.key === "Enter") sendText();
}

// ‚õî –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å –≤–∫–ª–∞–¥–∫–∏
document.addEventListener("visibilitychange", () => {
  if (document.hidden && mediaRecorder && mediaRecorder.state === "recording") {
    mediaRecorder.stop();
    document.getElementById("status").innerText = "‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞";
  }
});
