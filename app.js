let mediaRecorder = null;
let audioChunks = [];
let currentStream = null;
let isRecording = false;

// –î–ª—è VAD (–¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ—á–∏)
let audioCtx = null;
let analyser = null;
let vadTimer = null;
let hadSpeech = false;

// –ò—Å—Ç–æ—Ä–∏—è –≤ sessionStorage
const MAX_TURNS = 10;
let convo = JSON.parse(sessionStorage.getItem("clarity_history") || "[]");

function saveHistory() {
  sessionStorage.setItem("clarity_history", JSON.stringify(convo.slice(-MAX_TURNS * 2)));
}

function addToHistory(query, answer) {
  const history = document.getElementById("history");
  const div = document.createElement("div");
  div.className = "item";
  div.innerHTML = `
    <div class="q">üßë‚Äçüí¨ ${query || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"} </div>
    <div class="a">ü§ñ ${answer || "‚Äî"}</div>
  `;
  history.prepend(div);

  if (query) convo.push({ role: "user", content: query });
  if (answer) convo.push({ role: "assistant", content: answer });
  convo = convo.slice(-MAX_TURNS * 2);
  saveHistory();
}

window.addEventListener("DOMContentLoaded", () => {
  for (let i = Math.max(0, convo.length - MAX_TURNS * 2); i < convo.length; i += 2) {
    const q = convo[i]?.content || "";
    const a = convo[i + 1]?.content || "";
    if (!q && !a) continue;
    const history = document.getElementById("history");
    const div = document.createElement("div");
    div.className = "item";
    div.innerHTML = `
      <div class="q">üßë‚Äçüí¨ ${q || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"} </div>
      <div class="a">ü§ñ ${a || "‚Äî"}</div>
    `;
    history.prepend(div);
  }
});

function clipConvoForSend() {
  const maxChars = 6000;
  let acc = [];
  let total = 0;
  for (let i = convo.length - 1; i >= 0; i--) {
    const s = (convo[i].content || "").slice(0, 1000);
    if (total + s.length > maxChars) break;
    acc.unshift({ role: convo[i].role, content: s });
    total += s.length;
  }
  return acc;
}

function setUIRecording(on, note) {
  const status = document.getElementById("status");
  const micBtn = document.getElementById("micBtn");
  const sendBtn = document.getElementById("sendBtn");
  const input = document.getElementById("textInput");
  if (on) {
    status.innerText = note || "üé§ –°–ª—É—à–∞—é‚Ä¶ (5 —Å–µ–∫)";
    micBtn.textContent = "‚è≥ –ò–¥—ë—Ç –∑–∞–ø–∏—Å—å‚Ä¶";
    micBtn.disabled = true;
    sendBtn.disabled = true;
    input.disabled = true;
  } else {
    status.innerText = note || "–ì–æ—Ç–æ–≤–æ";
    micBtn.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å (5 —Å–µ–∫)";
    micBtn.disabled = false;
    sendBtn.disabled = false;
    input.disabled = false;
  }
}

/* ---------- ONE-SHOT RECORD (5 —Å–µ–∫) —Å VAD ---------- */
async function startOneShotRecording() {
  if (isRecording) return;
  try {
    setUIRecording(true, "üé§ –°–ª—É—à–∞—é‚Ä¶ (5 —Å–µ–∫)");
    hadSpeech = false;

    // 1) –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    currentStream = stream;
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];
    isRecording = true;

    // 2) VAD —á–µ—Ä–µ–∑ WebAudio (–æ—Ü–µ–Ω–∫–∞ RMS)
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const src = audioCtx.createMediaStreamSource(stream);
    analyser = audioCtx.createAnalyser();
    analyser.fftSize = 2048;
    src.connect(analyser);

    const buf = new Uint8Array(analyser.fftSize);
    const THRESHOLD = 10; // —á–µ–º –º–µ–Ω—å—à–µ ‚Äî —Ç–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–µ–µ (–∞–º–ø–ª–∏—Ç—É–¥–∞ 0..255)
    const FRAMES_REQUIRED = 5; // —Ç—Ä–µ–±—É–µ–º –∫–æ–ª-–≤–æ "–≥—Ä–æ–º–∫–∏—Ö" —Å—ç–º–ø–ª–æ–≤ –ø–æ–¥—Ä—è–¥
    let hotFrames = 0;

    vadTimer = setInterval(() => {
      analyser.getByteTimeDomainData(buf);
      // –æ—Ü–µ–Ω–∏–º RMS
      let sum = 0;
      for (let i = 0; i < buf.length; i++) {
        const v = buf[i] - 128;
        sum += v * v;
      }
      const rms = Math.sqrt(sum / buf.length); // ~0..~40
      if (rms > THRESHOLD) {
        hotFrames++;
        if (hotFrames >= FRAMES_REQUIRED) hadSpeech = true;
      } else {
        hotFrames = Math.max(0, hotFrames - 1);
      }
    }, 50);

    mediaRecorder.ondataavailable = (e) => {
      if (e.data && e.data.size > 0) audioChunks.push(e.data);
    };

    mediaRecorder.onstop = async () => {
      // –≥–∞—Å–∏–º –≤—Å—ë
      clearInterval(vadTimer); vadTimer = null;
      try { audioCtx && audioCtx.close(); } catch {}
      audioCtx = null; analyser = null;

      isRecording = false;
      try {
        if (currentStream) {
          currentStream.getTracks().forEach(t => t.stop());
          currentStream = null;
        } else if (mediaRecorder && mediaRecorder.stream) {
          mediaRecorder.stream.getTracks().forEach(t => t.stop());
        }
      } catch {}

      // –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      if (document.hidden) { setUIRecording(false, "‚è∏ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"); return; }

      // –ï—Å–ª–∏ —Ä–µ—á–∏ –Ω–µ –±—ã–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (!hadSpeech || !audioChunks.length) {
        setUIRecording(false, "ü§´ –¢–∏—à–∏–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é");
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const status = document.getElementById("status");
      if (status) status.innerText = "‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –∏ –¥—É–º–∞—é‚Ä¶";
      const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
      audioChunks = [];

      const audioBase64 = await blobToBase64(audioBlob);
      const res = await fetch("/.netlify/functions/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          audio: audioBase64,
          history: clipConvoForSend(),
          shouldGreet: convo.length === 0
        })
      });
      const data = await res.json();
      addToHistory(data.query || "(–≥–æ–ª–æ—Å)", data.text);
      setUIRecording(false, "‚úÖ –ì–æ—Ç–æ–≤–æ");
    };

    // –°—Ç–∞—Ä—Ç
    mediaRecorder.start();

    // –ê–≤—Ç–æ-—Å—Ç–æ–ø —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (isRecording && mediaRecorder?.state === "recording") mediaRecorder.stop();
    }, 5000);

  } catch (e) {
    console.error(e);
    isRecording = false;
    setUIRecording(false, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
  }
}

// –°—Ç–æ–ø –ø—Ä–∏ —É—Ö–æ–¥–µ/—Å–æ–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
document.addEventListener("visibilitychange", () => {
  if (document.hidden && isRecording && mediaRecorder?.state === "recording") {
    mediaRecorder.stop();
  }
});
window.addEventListener("pagehide", () => {
  if (isRecording && mediaRecorder?.state === "recording") {
    mediaRecorder.stop();
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
function blobToBase64(blob) {
  return new Promise((resolve, reject) => {
    const r = new FileReader();
    r.onloadend = () => resolve(r.result.split(",")[1]);
    r.onerror = reject;
    r.readAsDataURL(blob);
  });
}

/* ---------- –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–∫–∞–∫ –±—ã–ª–æ) ---------- */
async function sendText() {
  const input = document.getElementById("textInput");
  const text = input.value.trim();
  if (!text) return;

  document.getElementById("status").innerText = "‚è≥ –î—É–º–∞—é‚Ä¶";
  const res = await fetch("/.netlify/functions/ask", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      text,
      history: clipConvoForSend(),
      shouldGreet: convo.length === 0
    })
  });

  const data = await res.json();
  addToHistory(text, data.text);
  document.getElementById("status").innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ";
  input.value = "";
}

function handleKey(e) {
  if (e.key === "Enter") sendText();
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.startOneShotRecording = startOneShotRecording;
window.sendText = sendText;
window.handleKey = handleKey;
