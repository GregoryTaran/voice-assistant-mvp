require("dotenv").config();

const { OpenAI } = require("openai");
const Papa = require("papaparse");
const fetch = require("node-fetch");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

exports.handler = async (event) => {
  try {
    const body = JSON.parse(event.body || "{}");
    const userText = body.text || "";
    let transcript = userText;
    let whisperDebug = null;

    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∞—É–¥–∏–æ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ Whisper
    if (body.audio) {
      const audioBuffer = Buffer.from(body.audio, "base64");

      // Whisper ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
      const resp = await openai.audio.transcriptions.create({
        file: await openai.files.createReadStream(audioBuffer, "input.webm"),
        model: "whisper-1"
      });

      whisperDebug = resp;
      console.log("Whisper response:", resp);
      transcript = resp.text;
    }

    console.log("Final transcript:", transcript);

    // –ï—Å–ª–∏ —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ / —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ‚Äî –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–∞–∑—É
    if (!transcript || transcript.trim().length < 2) {
      console.log("‚õî Whisper –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª —Ä–µ—á—å –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –ø—É—Å—Ç–æ.");
      return {
        statusCode: 200,
        body: JSON.stringify({
          text: "–Ø –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
          transcript: transcript || "‚Ä¶",
          whisper: whisperDebug?.text || null,
          matches: 0
        })
      };
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –±–∞–∑—É
    const promptURL = "https://docs.google.com/document/d/1_N8EDELJy4Xk6pANqu4OK50fQjiixQDfR4o_xhuk1no/export?format=txt";
    const csvURL = "https://docs.google.com/spreadsheets/d/1oRxbMU9KR9TdWVEIpg1Q4O9R_pPrHofPmJ1y2_hO09Q/export?format=csv";

    const [promptText, csvText] = await Promise.all([
      fetch(promptURL).then(r => r.text()),
      fetch(csvURL).then(r => r.text())
    ]);

    // –≠—Ç–∞–ø 1 ‚Äî –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const analysis = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: promptText },
        { role: "user", content: `–ß—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${transcript}"?` }
      ]
    });

    const intent = analysis.choices[0].message.content;
    console.log("Intent:", intent);

    // –≠—Ç–∞–ø 2 ‚Äî –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã
    const parsed = Papa.parse(csvText, { header: true }).data;
    const relevant = parsed.filter(row =>
      JSON.stringify(row).toLowerCase().includes(transcript.toLowerCase())
    );

    const sampleData = relevant.slice(0, 3).map(row =>
      `${row.–ì–æ—Ä–æ–¥} ‚Äî ${row.–ê–¥—Ä–µ—Å}
${row.–ü–ª–æ—â–∞–¥—å} –º¬≤ ‚Äî –æ—Ç ${row.–¶–µ–Ω–∞} ‚Ç¨`
    ).join("\n");

    // –≠—Ç–∞–ø 3 ‚Äî –û—Ç–≤–µ—Ç
    const final = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: promptText },
        {
          role: "user",
          content: `–ó–∞–ø—Ä–æ—Å: ${transcript}
–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: ${intent}
–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä–µ–∫—Ç—ã:
${sampleData || "‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî"}`
        }
      ]
    });

    const gptAnswer = final.choices[0].message.content || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";
    console.log("üü° –û—Ç–≤–µ—Ç GPT:", gptAnswer);

    return {
      statusCode: 200,
      body: JSON.stringify({
        text: gptAnswer,
        transcript,
        whisper: whisperDebug?.text || null,
        matches: relevant.length,
        rawGpt: gptAnswer
      })
    };

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ ask.js:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Internal Server Error", details: err.message })
    };
  }
};
