// netlify/functions/ask.js
require("dotenv").config();
const fs = require("fs");
const path = require("path");
const { OpenAI } = require("openai");
const Papa = require("papaparse");
const fetch = require("node-fetch");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/* === üì° –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Airtable === */
async function getCurrentConfig() {
  try {
    const API_KEY = process.env.AIRTABLE_TOKEN;
    const BASE_ID = process.env.AIRTABLE_BASE_ID;
    const TABLE_NAME = "Config";

    const res = await fetch(`https://api.airtable.com/v0/${BASE_ID}/${TABLE_NAME}`, {
      headers: { Authorization: `Bearer ${API_KEY}` },
    });
    const data = await res.json();

    if (!data.records) throw new Error("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ");

    const cfg = {};
    data.records.forEach((r) => {
      const k = r.fields.key;
      const v = r.fields.value;
      if (k) cfg[k] = v;
    });
    return cfg;
  } catch (e) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Airtable:", e);
    return { gpt_model: "gpt-4-1106-preview", temperature: 0.7, language: "ru" }; // –¥–µ—Ñ–æ–ª—Ç
  }
}

/* === üß† –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π === */
let conversationMemory = [];

function updateMemory(user, assistant) {
  conversationMemory.push({ role: "user", content: user });
  conversationMemory.push({ role: "assistant", content: assistant });
  if (conversationMemory.length > 6) conversationMemory = conversationMemory.slice(-6);
}

/* === üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è === */
exports.handler = async (event) => {
  try {
    /* === 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ === */
    const cfg = await getCurrentConfig();
    const gptModel = cfg.gpt_model || "gpt-4-1106-preview";
    const gptTemperature = parseFloat(cfg.temperature) || 0.7;
    const gptLanguage = cfg.language || "ru";

    console.log("üß© –ò—Å–ø–æ–ª—å–∑—É–µ–º:", gptModel, "| T:", gptTemperature, "| Lang:", gptLanguage);

    /* === 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è === */
    const body = JSON.parse(event.body || "{}");
    const userText = body.text || "";
    const isFirst = body.shouldGreet === true || body.shouldGreet === "true";
    let transcript = userText;

    if (body.audio) {
      const audioBuffer = Buffer.from(body.audio, "base64");
      const tempPath = path.join("/tmp", `audio-${Date.now()}.webm`);
      fs.writeFileSync(tempPath, audioBuffer);

      const resp = await openai.audio.transcriptions.create({
        file: fs.createReadStream(tempPath),
        model: "whisper-1",
      });
      transcript = resp.text;
    }

    if (!transcript || transcript.trim().length < 2) {
      return {
        statusCode: 200,
        body: JSON.stringify({
          text: "–Ø –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
          transcript: transcript || "‚Ä¶",
          matches: 0,
        }),
      };
    }

    /* === 3Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏ CSV === */
    const prompt1URL =
      "https://docs.google.com/document/d/1AswvzYsQDm8vjqM-q28cCyitdohCc8IkurWjpfiksLY/export?format=txt";
    const prompt2URL =
      "https://docs.google.com/document/d/1_N8EDELJy4Xk6pANqu4OK50fQjiixQDfR4o_xhuk1no/export?format=txt";
    const csvURL =
      "https://docs.google.com/spreadsheets/d/1oRxbMU9KR9TdWVEIpg1Q4O9R_pPrHofPmJ1y2_hO09Q/export?format=csv";

    const [prompt1, prompt2, csvText] = await Promise.all([
      fetch(prompt1URL).then((r) => r.text()),
      fetch(prompt2URL).then((r) => r.text()),
      fetch(csvURL).then((r) => r.text()),
    ]);

    /* === 4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å === */
    const analysis = await openai.chat.completions.create({
      model: gptModel,
      temperature: gptTemperature,
      messages: [
        { role: "system", content: prompt1 },
        { role: "user", content: `–ß—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${transcript}"? –í–µ—Ä–Ω–∏ JSON.` },
      ],
    });

    let parsedAnalysis = {};
    const rawAnalysis = analysis.choices?.[0]?.message?.content || "";

    try {
      parsedAnalysis = JSON.parse(rawAnalysis);
    } catch (err) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON:", rawAnalysis);
      const match = rawAnalysis.match(/\{[\s\S]*\}/);
      if (match) {
        try {
          parsedAnalysis = JSON.parse(match[0]);
        } catch (err2) {
          parsedAnalysis = { intent: "clarify", message: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON." };
        }
      } else {
        parsedAnalysis = { intent: "clarify", message: "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π JSON." };
      }
    }

    const intent = parsedAnalysis.intent || "clarify";
    const filters = parsedAnalysis.filters || {};
    const clarifyMessage = parsedAnalysis.message || "";

    /* === 5Ô∏è‚É£ –ü–∞—Ä—Å–∏–º –±–∞–∑—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ === */
    const parsed = Papa.parse(csvText, { header: true }).data;

    function buildGlobalStats(data) {
      const valid = data.filter((r) => r["–æ–±—â–∞—è —Ü–µ–Ω–∞ (‚Ç¨)"] && r["–ø–ª–æ—â–∞–¥—å (–º¬≤)"]);
      const prices = valid.map((r) => parseFloat(r["–æ–±—â–∞—è —Ü–µ–Ω–∞ (‚Ç¨)"]));
      const areas = valid.map((r) => parseFloat(r["–ø–ª–æ—â–∞–¥—å (–º¬≤)"]));
      const pricePerM2 = valid
        .map((r) =>
          r["—Ü–µ–Ω–∞ –∑–∞ –º¬≤ (‚Ç¨)"]
            ? parseFloat(r["—Ü–µ–Ω–∞ –∑–∞ –º¬≤ (‚Ç¨)"])
            : parseFloat(r["–æ–±—â–∞—è —Ü–µ–Ω–∞ (‚Ç¨)"]) / parseFloat(r["–ø–ª–æ—â–∞–¥—å (–º¬≤)"])
        )
        .filter((x) => !isNaN(x));

      const regions = {};
      const types = {};
      valid.forEach((r) => {
        const reg = r["–æ–±–ª–∞—Å—Ç—å"];
        const typ = r["–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"];
        if (reg) regions[reg] = (regions[reg] || 0) + 1;
        if (typ) types[typ] = (types[typ] || 0) + 1;
      });

      const avg = (arr) => Math.round(arr.reduce((a, b) => a + b, 0) / arr.length);

      return {
        total_properties: valid.length,
        min_price: Math.min(...prices),
        max_price: Math.max(...prices),
        avg_price: avg(prices),
        min_area: Math.min(...areas),
        max_area: Math.max(...areas),
        avg_area: avg(areas),
        avg_price_per_m2: avg(pricePerM2),
        regions,
        types,
        most_common_type:
          Object.entries(types).sort((a, b) => b[1] - a[1])[0]?.[0] || "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã",
        most_popular_region:
          Object.entries(regions).sort((a, b) => b[1] - a[1])[0]?.[0] || "Lazio",
      };
    }

    const globalStats = buildGlobalStats(parsed);

    const relevant = parsed.filter((row) =>
      JSON.stringify(row).toLowerCase().includes(transcript.toLowerCase())
    );

    const sampleData = relevant
      .slice(0, 3)
      .map(
        (row) => `${row["–ì–æ—Ä–æ–¥"]} ‚Äî ${row["–ê–¥—Ä–µ—Å"] || "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}
${row["–ü–ª–æ—â–∞–¥—å (–º¬≤)"]} –º¬≤ ‚Äî –æ—Ç ${row["–û–±—â–∞—è —Ü–µ–Ω–∞ (‚Ç¨)"]} ‚Ç¨
–°–¥–∞—á–∞: ${row["–°—Ä–æ–∫ —Å–¥–∞—á–∏"] || "‚Äî"}`
      )
      .join("\n\n");

    /* === 6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç GPT === */
    const messages = [
      { role: "system", content: prompt2 },
      ...conversationMemory,
      {
        role: "user",
        content: JSON.stringify({
          transcript,
          intent,
          filters,
          message: clarifyMessage,
          results: sampleData,
          total: relevant.length,
          isFirst,
          globalStats,
          language: gptLanguage,
        }),
      },
    ];

    const final = await openai.chat.completions.create({
      model: gptModel,
      temperature: gptTemperature,
      messages,
    });

    const gptAnswer = final.choices?.[0]?.message?.content || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";
    updateMemory(transcript, gptAnswer);

    return {
      statusCode: 200,
      body: JSON.stringify({
        text: gptAnswer,
        transcript,
        matches: relevant.length,
        model_used: gptModel,
      }),
    };
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: "Internal Server Error",
        details: err.message,
      }),
    };
  }
};
