const fetch = require("node-fetch");
const FormData = require("form-data");
const Papa = require("papaparse");

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏
const DOCS_URL = "https://docs.google.com/document/d/1_N8EDELJy4Xk6pANqu4OK50fQjiixQDfR4o_xhuk1no/export?format=txt";
const SHEET_URL = "https://docs.google.com/spreadsheets/d/1oRxbMU9KR9TdWVEIpg1Q4O9R_pPrHofPmJ1y2_hO09Q/export?format=csv";

// üîß fallback-–ø—Ä–æ–º—Ç –µ—Å–ª–∏ Google Docs –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
const FALLBACK_PROMPT = `
–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è ‚Äî –æ—Ç–≤–µ—Ç—å –≤–µ–∂–ª–∏–≤–æ.
–ï—Å–ª–∏ –æ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö, –≥–æ—Ä–æ–¥–∞—Ö –∏–ª–∏ —Ü–µ–Ω–∞—Ö ‚Äî –Ω–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ.
–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã.
`;

exports.handler = async (event) => {
  try {
    const { audio, userText = "", sessionId = "", history = [] } = JSON.parse(event.body || "{}");
    let transcript = userText;

    // üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Whisper
    if (audio) {
      const audioBuffer = Buffer.from(audio, "base64");
      const form = new FormData();
      form.append("file", audioBuffer, { filename: "audio.webm", contentType: "audio/webm" });
      form.append("model", "whisper-1");

      const whisperRes = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: { Authorization: `Bearer ${OPENAI_API_KEY}` },
        body: form
      });

      const whisperData = await whisperRes.json();
      transcript = whisperData.text || "";
    }

    if (!transcript) {
      return { statusCode: 200, body: JSON.stringify({ text: "–Ø –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", transcript: "" }) };
    }

    // üßæ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç
    let promptText = FALLBACK_PROMPT;
    try {
      const res = await fetch(DOCS_URL);
      const txt = await res.text();
      if (txt && txt.length > 20) promptText = txt;
    } catch (e) {
      console.log("‚ö†Ô∏è Google Docs –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.");
    }

    // üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
    let data = [];
    try {
      const csvText = await fetch(SHEET_URL).then(r => r.text());
      const parsed = Papa.parse(csvText, { header: true });
      data = parsed.data.slice(0, 50); // –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 50 —Å—Ç—Ä–æ–∫
    } catch (e) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Sheets:", e.message);
    }

    // üß† –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è GPT
    const messages = [
      { role: "system", content: promptText },
      ...history.slice(-10),
      {
        role: "user",
        content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "${transcript}". 
–í–æ—Ç –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫ (CSV): ${JSON.stringify(data.slice(0, 10))}.
–û—Ç–≤–µ—Ç—å –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.`
      }
    ];

    const gptRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ model: "gpt-3.5-turbo", messages, temperature: 0.7 })
    });

    const gptData = await gptRes.json();
    let finalAnswer = gptData.choices?.[0]?.message?.content?.trim() || "";

    // üîÅ fallback, –µ—Å–ª–∏ GPT –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    if (!finalAnswer) {
      console.log("‚ö†Ô∏è GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º fallback.");
      finalAnswer = "–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ü–µ–Ω—É.";
    }

    return {
      statusCode: 200,
      body: JSON.stringify({ text: finalAnswer, transcript })
    };
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏:", err.message);
    return { statusCode: 500, body: JSON.stringify({ text: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", error: err.message }) };
  }
};
