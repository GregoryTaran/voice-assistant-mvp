const fetch = require("node-fetch");
const FormData = require("form-data");
const Papa = require("papaparse");

// ‚öôÔ∏è –¢–≤–æ—è —Ç–∞–±–ª–∏—Ü–∞ (–ª–∏—Å—Ç: apartments)
const CSV_URL =
  "https://docs.google.com/spreadsheets/d/1oRxbMU9KR9TdWVEIpg1Q4O9R_pPrHofPmJ1y2_hO09Q/gviz/tq?tqx=out:csv&sheet=apartments";

// ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –∏–∑ Google Docs (–∫–∞–∫ –∏ —Ö–æ—Ç–µ–ª–∏)
const SYSTEM_PROMPT_URL =
  "https://docs.google.com/document/d/1_N8EDELJy4Xk6pANqu4OK50fQjiixQDfR4o_xhuk1no/export?format=txt";

// 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
async function loadApartments() {
  const res = await fetch(CSV_URL);
  if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSV –∏–∑ Google Sheets");
  const csvText = await res.text();
  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true });
  return parsed.data; // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∫–æ–ª–æ–Ω–æ–∫
}

// 2) GPT-1: –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤–µ—Ä–Ω—É—Ç—å JSON (intent + filters)
async function understandIntent(userText) {
  const system = `
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. 
–ó–∞–¥–∞—á–∞: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–æ–¥–∞, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç JSON. –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥.

–ü—Ä–∏–º–µ—Ä—ã:
"–ü–æ–∫–∞–∂–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ú–∏–ª–∞–Ω–µ –¥–æ 150 —Ç—ã—Å—è—á –µ–≤—Ä–æ"
‚Üí {"intent":"search_apartments","filters":{"city":"–ú–∏–ª–∞–Ω","max_price":150000}}

"–ö–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã?"
‚Üí {"intent":"list_cities"}

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å.
`;

  const resp = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      temperature: 0.2,
      messages: [
        { role: "system", content: system },
        { role: "user", content: userText }
      ]
    }),
  });

  const data = await resp.json();
  const raw = data?.choices?.[0]?.message?.content?.trim() || "{}";

  // –ü—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å JSON, –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±–µ—Ä–Ω—É–ª–∞ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const jsonMatch = raw.match(/\{[\s\S]*\}$/);
  const jsonStr = jsonMatch ? jsonMatch[0] : raw;
  try {
    return JSON.parse(jsonStr);
  } catch (e) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç GPT:", raw);
    return null;
  }
}

// 3) –ò—Å–ø–æ–ª–Ω–∏—Ç—å JSON-–∑–∞–ø—Ä–æ—Å –ò–ò –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
function executeIntent(apartments, intentObj) {
  if (!intentObj || !intentObj.intent) return { results: [], meta: { intent: "unknown" } };

  const intent = intentObj.intent;
  const filters = intentObj.filters || {};

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ–π—Å: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
  if (intent === "list_cities") {
    const cities = [...new Set(apartments.map(a => (a["–ì–æ—Ä–æ–¥"] || "").trim()))].filter(Boolean);
    return { results: cities.map(c => ({ city: c })), meta: { intent } };
  }

  // –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä
  if (intent === "search_apartments") {
    const city = filters.city ? String(filters.city).toLowerCase() : null;
    const maxPrice = filters.max_price != null ? Number(filters.max_price) : null;

    const results = apartments.filter(ap => {
      const apCity = (ap["–ì–æ—Ä–æ–¥"] || "").toLowerCase();
      const total = Number(ap["–û–±—â–∞—è —Ü–µ–Ω–∞ (‚Ç¨)"] || ap["–û–±—â–∞—è —Ü–µ–Ω–∞"] || 0);
      const cityOk = city ? apCity.includes(city) : true;
      const priceOk = maxPrice ? total <= maxPrice : true;
      return cityOk && priceOk;
    });

    return { results, meta: { intent, filters } };
  }

  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ intent-—ã –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
  return { results: [], meta: { intent: "unsupported" } };
}

// 4) GPT-2: –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–≤–µ—Ç –∫—Ä–∞—Å–∏–≤–æ, —Å —É—á—ë—Ç–æ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –∏–∑ Google Docs
async function generateAnswer(userText, resultsSlice) {
  const systemPrompt = await fetch(SYSTEM_PROMPT_URL).then(r => r.text());

  const resp = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      temperature: 0.7,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userText },
        // –ü–µ—Ä–µ–¥–∞—ë–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON (–¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å)
        { role: "assistant", content: JSON.stringify(resultsSlice) }
      ]
    }),
  });

  const data = await resp.json();
  return data?.choices?.[0]?.message?.content || "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";
}

exports.handler = async function (event) {
  try {
    const body = JSON.parse(event.body || "{}");
    let userText = (body.text || "").trim();

    // üé§ –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∞—É–¥–∏–æ ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper
    if (!userText && body.audio) {
      let audioBase64 = body.audio;
      if (audioBase64.startsWith("data:")) {
        audioBase64 = audioBase64.split(",")[1];
      }
      const audioBuffer = Buffer.from(audioBase64, "base64");
      const form = new FormData();
      form.append("file", audioBuffer, { filename: "audio.webm", contentType: "audio/webm" });
      form.append("model", "whisper-1");

      const whisperRes = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: { Authorization: `Bearer ${process.env.OPENAI_API_KEY}` },
        body: form,
      });

      const whisperJson = await whisperRes.json();
      if (!whisperRes.ok) {
        return { statusCode: 500, body: JSON.stringify({ error: "Whisper failed", details: whisperJson }) };
      }
      userText = (whisperJson.text || "").trim();
    }

    if (!userText) {
      return { statusCode: 400, body: JSON.stringify({ error: "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å" }) };
    }

    // 1) GPT-1 –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —Ö–æ—Ç–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const intentObj = await understandIntent(userText);

    // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    const apartments = await loadApartments();

    // 3) –ò—Å–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ò–ò –∫ –±–∞–∑–µ
    const { results } = executeIntent(apartments, intentObj);

    // 4) GPT-2 —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const answer = await generateAnswer(userText, results.slice(0, 10));

    return {
      statusCode: 200,
      body: JSON.stringify({ text: answer, query: userText }),
    };
  } catch (e) {
    console.error(e);
    return { statusCode: 500, body: JSON.stringify({ error: e.message }) };
  }
};
