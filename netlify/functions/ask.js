const fetch = require("node-fetch");
const Papa = require("papaparse");

// üìä URL —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã Google Sheets
const CSV_URL = "https://docs.google.com/spreadsheets/d/1oRxbMU9KR9TdWVEIpg1Q4O9R_pPrHofPmJ1y2_hO09Q/gviz/tq?tqx=out:csv&sheet=apartments";

// 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function loadApartments() {
  const res = await fetch(CSV_URL);
  const csvText = await res.text();
  const parsed = Papa.parse(csvText, { header: true });
  return parsed.data;
}

// 2Ô∏è‚É£ GPT-–≤—ã–∑–æ–≤ ‚Äî –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–º—ã—Å–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
async function understandIntent(userText) {
  const prompt = `
–¢—ã ‚Äî –ò–ò –∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–ü—Ä–∏–º–µ—Ä:
"–ü–æ–∫–∞–∂–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ú–∏–ª–∞–Ω–µ –¥–æ 150 —Ç—ã—Å—è—á –µ–≤—Ä–æ"
‚Üí {"intent":"search_apartments","filters":{"city":"–ú–∏–ª–∞–Ω","max_price":150000}}

–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ, –¥–æ–±–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å.`;

  const res = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: prompt },
        { role: "user", content: userText },
      ],
      temperature: 0.3,
    }),
  });

  const data = await res.json();
  const raw = data?.choices?.[0]?.message?.content?.trim();
  try {
    return JSON.parse(raw);
  } catch {
    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT:", raw);
    return null;
  }
}

// 3Ô∏è‚É£ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã (–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ò–ò)
function filterByIntent(apartments, intent) {
  if (!intent || !intent.filters) return [];
  const { city, max_price } = intent.filters;
  return apartments.filter(ap => {
    const matchCity = city ? ap["–ì–æ—Ä–æ–¥"]?.toLowerCase().includes(city.toLowerCase()) : true;
    const matchPrice = max_price ? Number(ap["–û–±—â–∞—è —Ü–µ–Ω–∞ (‚Ç¨)"]) <= max_price : true;
    return matchCity && matchPrice;
  });
}

// 4Ô∏è‚É£ GPT-–≤—ã–∑–æ–≤ ‚Äî —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
async function generateAnswer(userText, results) {
  const systemPrompt = `
–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ "–Ø—Å–Ω–æ—Å—Ç—å".
–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –≤ –≤–∏–¥–µ JSON –∏ –¥–æ–ª–∂–µ–Ω —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–≤–µ—Ç.
–ù–∞—á–Ω–∏ —Å —Ñ—Ä–∞–∑—ã: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–π—Ä–æ—Å—Ç—å –Ø—Å–Ω–æ—Å—Ç—å."
`;

  const res = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userText },
        { role: "assistant", content: JSON.stringify(results.slice(0, 10)) }
      ],
      temperature: 0.7,
    }),
  });

  const data = await res.json();
  return data?.choices?.[0]?.message?.content || "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";
}

// 5Ô∏è‚É£ –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
exports.handler = async function (event) {
  try {
    const body = JSON.parse(event.body);
    const userText = body.text || "";

    // –≠—Ç–∞–ø 1: GPT –ø–æ–Ω–∏–º–∞–µ—Ç —Å–º—ã—Å–ª
    const intent = await understandIntent(userText);

    // –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
    const apartments = await loadApartments();

    // –≠—Ç–∞–ø 3: –ò–ò-–∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const filtered = filterByIntent(apartments, intent);

    // –≠—Ç–∞–ø 4: GPT —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    const responseText = await generateAnswer(userText, filtered);

    return {
      statusCode: 200,
      body: JSON.stringify({ text: responseText }),
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message }),
    };
  }
};
