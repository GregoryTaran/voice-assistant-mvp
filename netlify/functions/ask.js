require("dotenv").config();

const fs = require("fs");
const path = require("path");
const { OpenAI } = require("openai");
const Papa = require("papaparse");
const fetch = require("node-fetch");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

exports.handler = async (event) => {
  try {
    const body = JSON.parse(event.body || "{}");
    const userText = body.text || "";
    const isFirst = body.shouldGreet || false; // üëà —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    let transcript = userText;
    let whisperDebug = null;

    // === 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ) ===
    if (body.audio) {
      const audioBuffer = Buffer.from(body.audio, "base64");
      const tempPath = path.join("/tmp", `audio-${Date.now()}.webm`);
      fs.writeFileSync(tempPath, audioBuffer);

      const resp = await openai.audio.transcriptions.create({
        file: fs.createReadStream(tempPath),
        model: "whisper-1"
      });

      whisperDebug = resp;
      transcript = resp.text;
    }

    console.log("üì• Transcript:", transcript);

    // === 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
    if (!transcript || transcript.trim().length < 2) {
      return {
        statusCode: 200,
        body: JSON.stringify({
          text: "–Ø –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
          transcript: transcript || "‚Ä¶",
          whisper: whisperDebug?.text || null,
          matches: 0
        })
      };
    }

    // === 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∞ –ø—Ä–æ–º—Ç–∞ –∏ –±–∞–∑—É ===
    const prompt1URL = "https://docs.google.com/document/d/1AswvzYsQDm8vjqM-q28cCyitdohCc8IkurWjpfiksLY/export?format=txt"; // –ê–Ω–∞–ª–∏—Ç–∏–∫
    const prompt2URL = "https://docs.google.com/document/d/1_N8EDELJy4Xk6pANqu4OK50fQjiixQDfR4o_xhuk1no/export?format=txt"; // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    const csvURL = "https://docs.google.com/spreadsheets/d/1oRxbMU9KR9TdWVEIpg1Q4O9R_pPrHofPmJ1y2_hO09Q/export?format=csv";

    const [prompt1, prompt2, csvText] = await Promise.all([
      fetch(prompt1URL).then(r => r.text()),
      fetch(prompt2URL).then(r => r.text()),
      fetch(csvURL).then(r => r.text())
    ]);

    // === 4. –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    const analysis = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: prompt1 },
        { role: "user", content: `–ß—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${transcript}"? –í–µ—Ä–Ω–∏ JSON.` }
      ]
    });

    let parsedAnalysis;
    try {
      parsedAnalysis = JSON.parse(analysis.choices[0].message.content);
    } catch (e) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
      parsedAnalysis = { intent: "clarify", filters: {}, message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å." };
    }

    const intent = parsedAnalysis.intent || "clarify";
    const filters = parsedAnalysis.filters || {};
    const clarifyMessage = parsedAnalysis.message || "";

    console.log("üîé Intent:", intent);

    // === 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã ===
    const parsed = Papa.parse(csvText, { header: true }).data;
    const relevant = parsed.filter(row =>
      JSON.stringify(row).toLowerCase().includes(transcript.toLowerCase())
    );

    const sampleData = relevant.slice(0, 3).map(row =>
      `${row.–ì–æ—Ä–æ–¥} ‚Äî ${row.–ê–¥—Ä–µ—Å}\n${row.–ü–ª–æ—â–∞–¥—å} –º¬≤ ‚Äî –æ—Ç ${row.–¶–µ–Ω–∞} ‚Ç¨`
    ).join("\n");

    // === 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ===
    const final = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: prompt2 },
        {
          role: "user",
          content: JSON.stringify({
            transcript,
            intent,
            filters,
            message: clarifyMessage,
            results: sampleData,
            total: relevant.length,
            isFirst
          })
        }
      ]
    });

    let gptAnswer = final.choices[0].message.content || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";

    // === 7. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ===
    if (isFirst) {
      const greeting =
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ù–µ–π—Ä–æ-–∞–≥–µ–Ω—Ç –•–ê–ë. –ü–æ–º–æ–≥–∞—é –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É –≤ –ò—Ç–∞–ª–∏–∏. " +
        "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç, –≥–æ—Ä–æ–¥ –∏–ª–∏ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å. –¢–∞–∫–∂–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–∫—Ü–∏–∏ –∏ —Ä–∞—Å—Å—Ä–æ—á–∫—É.";
      if (!gptAnswer.includes("–ù–µ–π—Ä–æ-–∞–≥–µ–Ω—Ç –•–ê–ë")) {
        gptAnswer = `${greeting}\n\n${gptAnswer}`;
        console.log("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞).");
      }
    }

    console.log("üí¨ –û—Ç–≤–µ—Ç GPT:", gptAnswer);

    return {
      statusCode: 200,
      body: JSON.stringify({
        text: gptAnswer,
        transcript,
        whisper: whisperDebug?.text || null,
        matches: relevant.length,
        rawGpt: gptAnswer
      })
    };

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ ask.js:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: "Internal Server Error",
        details: err.message
      })
    };
  }
};
