document.addEventListener("DOMContentLoaded", () => {
  const micBtn = document.getElementById("micBtn");
  const status = document.getElementById("status");
  const waves = micBtn.querySelector(".waves");
  let isTalking = false;
  let audioContext, analyser, microphone, dataArray;
  let animationId;

  micBtn.addEventListener("click", async () => {
    isTalking = !isTalking;

    if (isTalking) {
      micBtn.classList.add("active", "pulse");
      waves.classList.add("show");
      status.textContent = "–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∞–ª—Å—è‚Ä¶";
      startMicVisualization();
    } else {
      micBtn.classList.remove("active", "pulse");
      waves.classList.remove("show");
      status.textContent = "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.";
      stopMicVisualization();
    }
  });

  async function startMicVisualization() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioContext.createAnalyser();
      microphone = audioContext.createMediaStreamSource(stream);
      dataArray = new Uint8Array(analyser.frequencyBinCount);

      microphone.connect(analyser);

      function animate() {
        analyser.getByteTimeDomainData(dataArray);
        let sum = 0;
        for (let i = 0; i < dataArray.length; i++) {
          sum += Math.abs(dataArray[i] - 128);
        }
        const volume = sum / dataArray.length; // —Å—Ä–µ–¥–Ω—è—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (0‚Äì128)

        const scale = 1 + volume / 60; // —É—Å–∏–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        const opacity = Math.min(0.8, volume / 80); // –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        waves.querySelectorAll("span").forEach((wave, i) => {
          wave.style.transform = `scale(${scale + i * 0.2})`;
          wave.style.opacity = opacity;
        });

        animationId = requestAnimationFrame(animate);
      }

      animate();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", err);
      status.textContent = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É üòï";
      isTalking = false;
    }
  }

  function stopMicVisualization() {
    if (animationId) cancelAnimationFrame(animationId);
    if (audioContext) audioContext.close();
  }
});
