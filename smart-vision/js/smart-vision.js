document.addEventListener("DOMContentLoaded", () => {
  const micBtn = document.getElementById("micBtn");
  const status = document.getElementById("status");
  const waves = micBtn.querySelector(".waves");
  const historyEl = document.getElementById("history");

  let isTalking = false;
  let audioContext, analyser, microphone, dataArray, stream, mediaRecorder;
  let animationId, chunkTimer;
  let audioChunks = [];
  let lastStatus = "";
  let currentText = "";

  const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);

  micBtn.addEventListener("click", async () => {
    isTalking = !isTalking;

    if (isTalking) {
      micBtn.classList.add("active", "pulse");
      waves.classList.add("show");
      updateStatus("–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∞–ª—Å—è‚Ä¶");

      // –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª—ã–π –≤—ã–≤–æ–¥
      currentText = "";
      historyEl.innerHTML = "";

      if (isMobile) {
        startMobileMode();
      } else {
        await startDesktopMic();
      }

      // —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–æ–≤
      await startRecording();
    } else {
      micBtn.classList.remove("active", "pulse");
      waves.classList.remove("show");
      stopRecording();
      stopMic();
      updateStatus("–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  });

  /* === –î–ï–°–ö–¢–û–ü: –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è === */
  async function startDesktopMic() {
    try {
      stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioContext.createAnalyser();
      microphone = audioContext.createMediaStreamSource(stream);
      dataArray = new Uint8Array(analyser.frequencyBinCount);
      microphone.connect(analyser);
      animateVolume();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:", err);
      updateStatus("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É üòï");
    }
  }

  function animateVolume() {
    analyser.getByteTimeDomainData(dataArray);
    let sum = 0;
    for (let i = 0; i < dataArray.length; i++) {
      sum += Math.abs(dataArray[i] - 128);
    }
    const volume = sum / dataArray.length;

    waves.querySelectorAll("span").forEach((wave, i) => {
      const scale = 1 + volume / 70 + i * 0.15;
      wave.style.transform = `scale(${scale})`;
      wave.style.opacity = Math.min(0.7, volume / 50);
    });

    const newStatus = volume < 3 ? "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω üéô" : "–ì–æ–≤–æ—Ä–∏—Ç–µ üó£Ô∏è";
    if (newStatus !== lastStatus) {
      updateStatus(newStatus);
      lastStatus = newStatus;
    }

    if (isTalking) animationId = requestAnimationFrame(animateVolume);
  }

  /* === –ú–û–ë–ò–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –º—è–≥–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω === */
  function startMobileMode() {
    updateStatus("–ì–æ–≤–æ—Ä–∏—Ç–µ üó£Ô∏è");
    let pulse = 0;
    (function animateMobile() {
      const scaleBase = 1 + 0.08 * Math.sin(pulse);
      const opacityBase = 0.25 + 0.2 * Math.abs(Math.sin(pulse));
      waves.querySelectorAll("span").forEach((wave, i) => {
        const scale = scaleBase + i * 0.2;
        wave.style.transform = `scale(${scale})`;
        wave.style.opacity = opacityBase - i * 0.05;
      });
      pulse += 0.15;
      if (isTalking) requestAnimationFrame(animateMobile);
    })();
  }

  /* === –ó–ê–ü–ò–°–¨ –ò –û–¢–ü–†–ê–í–ö–ê –ß–ê–ù–ö–û–í (JSON + base64) === */
  async function startRecording() {
    try {
      if (!stream) {
        // –µ—Å–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ desktop getUserMedia
        stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      }

      // –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π mime
      const preferred = [
        "audio/webm;codecs=opus",
        "audio/webm",
        "audio/ogg;codecs=opus",
        "audio/ogg",
      ];
      let chosenType = "";
      for (const t of preferred) {
        if (MediaRecorder.isTypeSupported(t)) { chosenType = t; break; }
      }

      mediaRecorder = new MediaRecorder(stream, chosenType ? { mimeType: chosenType } : undefined);
      audioChunks = [];
      mediaRecorder.start(250); // –ø—Ä–æ—Å–∏–º —á–∞—Å—Ç—ã–µ dataavailable

      mediaRecorder.addEventListener("dataavailable", (e) => {
        if (e.data && e.data.size > 0) audioChunks.push(e.data);
      });

      // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–µ–µ—Å—è
      chunkTimer = setInterval(async () => {
        if (!isTalking) return;
        if (audioChunks.length > 0) {
          const blob = new Blob(audioChunks.splice(0), { type: mediaRecorder.mimeType || chosenType || "audio/webm" });
          await sendAudioChunk(blob);
        }
      }, 2000);

      mediaRecorder.addEventListener("stop", async () => {
        clearInterval(chunkTimer);
        if (audioChunks.length > 0) {
          const finalBlob = new Blob(audioChunks, { type: mediaRecorder.mimeType || chosenType || "audio/webm" });
          await sendAudioChunk(finalBlob);
        }
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", err);
      updateStatus("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ‚ö†Ô∏è");
    }
  }

  function stopRecording() {
    if (mediaRecorder && mediaRecorder.state !== "inactive") {
      mediaRecorder.stop();
    }
    if (chunkTimer) clearInterval(chunkTimer);
  }

  /* === –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞ –≤ /transcribe (–æ–∂–∏–¥–∞–µ—Ç JSON {audio, mime, ext}) === */
  async function sendAudioChunk(blob) {
    try {
      const mime = blob.type || (mediaRecorder && mediaRecorder.mimeType) || "audio/webm";
      const ext = extFromMime(mime);
      const arrayBuf = await blob.arrayBuffer();
      const base64 = base64FromArrayBuffer(arrayBuf);

      const res = await fetch("/.netlify/functions/transcribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ audio: base64, mime, ext }),
      });

      if (!res.ok) {
        console.error("Transcribe HTTP error:", res.status);
        return;
      }

      const data = await res.json();
      if (data && data.text) {
        // —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç plain text (—Ü–µ–ª—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏)
        appendTypedTextSegment(data.text);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–∞:", err);
    }
  }

  /* === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ === */
  function base64FromArrayBuffer(buffer) {
    let binary = "";
    const bytes = new Uint8Array(buffer);
    const chunkSize = 0x8000; // 32 KB
    for (let i = 0; i < bytes.length; i += chunkSize) {
      const chunk = bytes.subarray(i, i + chunkSize);
      binary += String.fromCharCode.apply(null, chunk);
    }
    return btoa(binary);
  }

  function extFromMime(mime) {
    if (!mime) return "webm";
    if (mime.includes("ogg")) return "ogg";
    if (mime.includes("webm")) return "webm";
    if (mime.includes("wav")) return "wav";
    if (mime.includes("mp3")) return "mp3";
    if (mime.includes("m4a")) return "m4a";
    return "webm";
  }

  /* === –ñ–ò–í–û–ô –í–´–í–û–î (–ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º, –±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤) === */
  function appendTypedTextSegment(segmentText) {
    if (!segmentText) return;

    // —Å–æ–∑–¥–∞—ë–º/–Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    let live = document.getElementById("liveText");
    if (!live) {
      live = document.createElement("div");
      live.id = "liveText";
      live.className = "live-text";
      historyEl.appendChild(live);
    }

    // –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —á–∞—Å—Ç—å —É–∂–µ –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ ‚Äî –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ "—Ä–∞–∑–Ω–∏—Ü—É"
    const cleaned = segmentText.trim();
    let toAppend = cleaned;
    if (currentText && cleaned.startsWith(currentText)) {
      toAppend = cleaned.slice(currentText.length);
    }
    // –µ—Å–ª–∏ –≤—Å—ë –∂–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ä–∞–∑–Ω–∏—Ü—É ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º —Å–µ–≥–º–µ–Ω—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º
    if (!toAppend) toAppend = cleaned;

    currentText = cleaned;

    const span = document.createElement("span");
    span.className = "typed";
    span.textContent = (toAppend + " ");
    live.appendChild(span);

    // –∞–≤—Ç–æ-–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ (–º—è–≥–∫–∞—è, –Ω–æ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π)
    historyEl.scrollTop = historyEl.scrollHeight;
  }

  /* === –°–¢–û–ü –ú–ò–ö–†–û–§–û–ù–ê/–ê–ù–ò–ú–ê–¶–ò–ò === */
  function stopMic() {
    if (animationId) cancelAnimationFrame(animationId);
    if (audioContext) { try { audioContext.close(); } catch (_) {} }
    if (stream) {
      stream.getTracks().forEach((t) => t.stop());
      stream = null;
    }
  }

  function updateStatus(text) {
    status.style.opacity = 0;
    setTimeout(() => {
      status.textContent = text;
      status.style.opacity = 1;
    }, 150);
  }
});
