document.addEventListener("DOMContentLoaded", () => {
  const micBtn = document.getElementById("micBtn");
  const status = document.getElementById("status");
  const waves = micBtn.querySelector(".waves");
  const historyEl = document.getElementById("history");

  let isTalking = false;
  let audioContext, analyser, microphone, dataArray, stream, mediaRecorder;
  let animationId, chunkTimer;
  let audioChunks = [];
  let lastStatus = "";
  let currentText = "";

  const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);

  micBtn.addEventListener("click", async () => {
    isTalking = !isTalking;

    if (isTalking) {
      micBtn.classList.add("active", "pulse");
      waves.classList.add("show");
      updateStatus("–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∞–ª—Å—è‚Ä¶");

      // —á–∏—Å—Ç–∏–º —ç–∫—Ä–∞–Ω/—Å–æ—Å—Ç–æ—è–Ω–∏–µ
      currentText = "";
      historyEl.innerHTML = "";

      if (isMobile) {
        startMobileMode();
        await ensureStream();
      } else {
        await startDesktopMic();
      }

      await startRecording(); // –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
    } else {
      micBtn.classList.remove("active", "pulse");
      waves.classList.remove("show");
      stopRecording();
      stopMic();
      updateStatus("–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  });

  /* === –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω (–µ—Å–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º) === */
  async function ensureStream() {
    if (!stream) {
      try {
        stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      } catch (e) {
        console.error("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", e);
        updateStatus("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É üòï");
      }
    }
  }

  /* === –î–ï–°–ö–¢–û–ü: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è + –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É === */
  async function startDesktopMic() {
    try {
      stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioContext.createAnalyser();
      microphone = audioContext.createMediaStreamSource(stream);
      dataArray = new Uint8Array(analyser.frequencyBinCount);
      microphone.connect(analyser);
      animateVolume();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:", err);
      updateStatus("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É üòï");
    }
  }

  /* === –ê–ù–ê–õ–ò–ó –ó–í–£–ö–ê –î–õ–Ø –í–û–õ–ù/–°–¢–ê–¢–£–°–ê === */
  function animateVolume() {
    if (!analyser) return;
    analyser.getByteTimeDomainData(dataArray);
    let sum = 0;
    for (let i = 0; i < dataArray.length; i++) {
      sum += Math.abs(dataArray[i] - 128);
    }
    const volume = sum / dataArray.length;

    waves.querySelectorAll("span").forEach((wave, i) => {
      const scale = 1 + volume / 70 + i * 0.15;
      wave.style.transform = `scale(${scale})`;
      wave.style.opacity = Math.min(0.7, volume / 50);
    });

    const newStatus = volume < 3 ? "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω üéô" : "–ì–æ–≤–æ—Ä–∏—Ç–µ üó£Ô∏è";
    if (newStatus !== lastStatus) {
      updateStatus(newStatus);
      lastStatus = newStatus;
    }

    if (isTalking) animationId = requestAnimationFrame(animateVolume);
  }

  /* === –ú–û–ë–ò–õ–¨–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –í–û–õ–ù === */
  function startMobileMode() {
    updateStatus("–ì–æ–≤–æ—Ä–∏—Ç–µ üó£Ô∏è");
    let pulse = 0;
    (function animateMobile() {
      const scaleBase = 1 + 0.08 * Math.sin(pulse);
      const opacityBase = 0.25 + 0.2 * Math.abs(Math.sin(pulse));
      waves.querySelectorAll("span").forEach((wave, i) => {
        const scale = scaleBase + i * 0.2;
        wave.style.transform = `scale(${scale})`;
        wave.style.opacity = opacityBase - i * 0.05;
      });
      pulse += 0.15;
      if (isTalking) requestAnimationFrame(animateMobile);
    })();
  }

  /* === –ó–ê–ü–ò–°–¨ –ò –û–¢–ü–†–ê–í–ö–ê –ß–ê–ù–ö–û–í === */
  async function startRecording() {
    try {
      if (!stream) {
        stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      }

      // –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const preferred = [
        "audio/webm;codecs=opus",
        "audio/webm",
        "audio/ogg;codecs=opus",
        "audio/ogg",
      ];
      let chosenType = "";
      for (const t of preferred) {
        if (window.MediaRecorder && MediaRecorder.isTypeSupported(t)) {
          chosenType = t; break;
        }
      }

      mediaRecorder = new MediaRecorder(stream, chosenType ? { mimeType: chosenType } : undefined);
      audioChunks = [];
      mediaRecorder.start(250); // —á–∞—Å—Ç–æ –æ—Ç–¥–∞—ë—Ç dataavailable

      mediaRecorder.addEventListener("dataavailable", (e) => {
        if (e.data && e.data.size > 0) audioChunks.push(e.data);
      });

      // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫ —à–ª—ë–º –Ω–∞–∫–æ–ø–∏–≤—à–µ–µ—Å—è
      chunkTimer = setInterval(async () => {
        if (!isTalking) return;
        if (audioChunks.length > 0) {
          const blob = new Blob(audioChunks.splice(0), {
            type: mediaRecorder.mimeType || chosenType || "audio/webm",
          });
          await sendAudioChunk(blob);
        }
      }, 2000);

      mediaRecorder.addEventListener("stop", async () => {
        clearInterval(chunkTimer);
        if (audioChunks.length > 0) {
          const finalBlob = new Blob(audioChunks, {
            type: mediaRecorder.mimeType || chosenType || "audio/webm",
          });
          await sendAudioChunk(finalBlob);
        }
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", err);
      updateStatus("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ‚ö†Ô∏è");
    }
  }

  function stopRecording() {
    if (mediaRecorder && mediaRecorder.state !== "inactive") {
      mediaRecorder.stop();
    }
    if (chunkTimer) clearInterval(chunkTimer);
  }

  /* === –î–û–°–¢–ê–í–ö–ê –ß–ê–ù–ö–ê: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è JSON base64, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º—É—Ç ‚Äî FormData === */
  async function sendAudioChunk(blob) {
    try {
      const mime = blob.type || (mediaRecorder && mediaRecorder.mimeType) || "audio/webm";
      const ext = extFromMime(mime);

      // 1) –ü–æ–ø—ã—Ç–∫–∞ JSON base64 (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º transcribe.js)
      const arrayBuf = await blob.arrayBuffer();
      const base64 = base64FromArrayBuffer(arrayBuf);
      let res = await fetch("/.netlify/functions/transcribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ audio: base64, mime, ext }),
      });

      // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è–ª JSON ‚Äî –ø—Ä–æ–±—É–µ–º FormData
      if (!res.ok) {
        // 2) fallback: multipart/form-data
        const fd = new FormData();
        fd.append("file", blob, `chunk.${ext}`);
        fd.append("mime", mime);
        res = await fetch("/.netlify/functions/transcribe", { method: "POST", body: fd });
      }

      if (!res.ok) {
        console.error("Transcribe HTTP error:", res.status);
        return;
      }

      const data = await res.json();

      // –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
      // { text: "..." } –ò–õ–ò –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const text = (typeof data === "string") ? data : data.text;
      if (text) appendTypedTextSegment(text);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–∞:", err);
    }
  }

  /* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï === */
  function base64FromArrayBuffer(buffer) {
    let binary = "";
    const bytes = new Uint8Array(buffer);
    const chunkSize = 0x8000;
    for (let i = 0; i < bytes.length; i += chunkSize) {
      const chunk = bytes.subarray(i, i + chunkSize);
      binary += String.fromCharCode.apply(null, chunk);
    }
    return btoa(binary);
  }

  function extFromMime(mime) {
    if (!mime) return "webm";
    if (mime.includes("ogg")) return "ogg";
    if (mime.includes("webm")) return "webm";
    if (mime.includes("wav")) return "wav";
    if (mime.includes("mp3")) return "mp3";
    if (mime.includes("m4a")) return "m4a";
    return "webm";
  }

  /* === –ú–Ø–ì–ö–ò–ô –í–´–í–û–î: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ¬´—Ä–∞–∑–Ω–∏—Ü—É¬ª —Å–µ–≥–º–µ–Ω—Ç–∞ === */
  function appendTypedTextSegment(segmentText) {
    if (!segmentText) return;

    let live = document.getElementById("liveText");
    if (!live) {
      live = document.createElement("div");
      live.id = "liveText";
      live.className = "live-text";
      historyEl.appendChild(live);
    }

    const cleaned = segmentText.trim();

    // –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –±–µ—Ä—ë–º —Ä–∞–∑–Ω–∏—Ü—É;
    // –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º.
    let toAppend = cleaned;
    if (currentText && cleaned.startsWith(currentText)) {
      toAppend = cleaned.slice(currentText.length);
    }
    if (!toAppend) toAppend = cleaned;

    currentText = cleaned.length >= currentText.length ? cleaned : currentText + " " + cleaned;

    const span = document.createElement("span");
    span.className = "typed";
    span.textContent = toAppend + " ";
    live.appendChild(span);

    // –º—è–≥–∫–∞—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    historyEl.scrollTop = historyEl.scrollHeight;
  }

  /* === STOP === */
  function stopMic() {
    if (animationId) cancelAnimationFrame(animationId);
    if (audioContext) { try { audioContext.close(); } catch (_) {} }
    if (stream) {
      stream.getTracks().forEach((t) => t.stop());
      stream = null;
    }
  }

  function updateStatus(text) {
    status.style.opacity = 0;
    setTimeout(() => {
      status.textContent = text;
      status.style.opacity = 1;
    }, 150);
  }
});
